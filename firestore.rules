/**
 * @file Firestore Security Rules for Inox PriceCalc
 *
 * @core_philosophy This ruleset provides public read access to item catalogs and universal settings,
 * and assumes a trusted environment (e.g., a service account) for writing scale data.
 * There is no user-specific data or concept of ownership in this model.
 *
 * @data_structure
 * - /inox_item_categories/{inoxItemCategoryId}: Stores item categories. Publicly readable.
 * - /inox_items/{inoxItemId}: Stores item details. Publicly readable.
 * - /universal_settings/{universalSettingsId}: Stores global settings. Publicly readable.
 * - /scale_data/{scaleDataId}: Stores scale readings. Writes should be secured via a service account.
 *
 * @key_security_decisions
 * - Public read access for item catalogs and settings to allow unauthenticated users to view data.
 * - No user listing is needed or supported.
 * - Strict separation of concerns with dedicated collections for different data types.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to inox item categories.
     * @path /inox_item_categories/{inoxItemCategoryId}
     * @allow (get) Any user can read an item category.
     * @allow (list) Any user can list item categories.
     * @deny (create) No one can create item categories directly.
     * @deny (update) No one can update item categories directly.
     * @deny (delete) No one can delete item categories directly.
     * @principle Allows public read access to item catalog data.
     */
    match /inox_item_categories/{inoxItemCategoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to inox items.
     * @path /inox_items/{inoxItemId}
     * @allow (get) Any user can read an item.
     * @allow (list) Any user can list items.
     * @deny (create) No one can create items directly.
     * @deny (update) No one can update items directly.
     * @deny (delete) No one can delete items directly.
     * @principle Allows public read access to item catalog data.
     */
    match /inox_items/{inoxItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to universal settings.
     * @path /universal_settings/{universalSettingsId}
     * @allow (get) Any user can read the universal settings.
     * @allow (list) Any user can list the universal settings.
     * @deny (create) No one can create universal settings directly.
     * @deny (update) No one can update universal settings directly.
     * @deny (delete) No one can delete universal settings directly.
     * @principle Allows public read access to global settings.
     */
    match /universal_settings/{universalSettingsId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts write access to the scale_data collection.  Assumes a trusted environment.
     * @path /scale_data/{scaleDataId}
     * @allow (create) Allows create if authenticated (e.g., via service account).
     * @allow (get) Any user can read a scale data entry.
     * @allow (list) Any user can list scale data entries.
     * @deny (update) No one can update scale data entries directly.
     * @deny (delete) No one can delete scale data entries directly.
     * @principle Secure write access assuming trusted environment and allows public read.
     */
    match /scale_data/{scaleDataId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Catches any other requests and denies them.
     * @path /
     * @deny (get) Denies all get operations.
     * @deny (list) Denies all list operations.
     * @deny (create) Denies all create operations.
     * @deny (update) Denies all update operations.
     * @deny (delete) Denies all delete operations.
     * @principle Default deny-all policy.
     */
    match /{path=**} {
      allow get, list, create, update, delete: if false;
    }
  }

  /**
   * @description Checks if the request is authenticated.
   * @return {bool} True if the request is authenticated, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }
}