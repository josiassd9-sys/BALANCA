/**
 * @fileoverview Firestore Security Rules for the Inox PriceCalc application.
 *
 * Core Philosophy:
 * This ruleset provides open read access to item catalogs and settings,
 * with the assumption that write operations will be handled by a trusted
 * server-side process (e.g., Cloud Function) authenticating with a service account.
 * There is no user-specific data or ownership managed by these rules.
 *
 * Data Structure:
 * - /inox_item_categories/{inoxItemCategoryId}: Categories of stainless steel items.
 * - /inox_items/{inoxItemId}: Specific stainless steel items with specifications.
 * - /universal_settings/{universalSettingsId}: Universal cost and margin settings.
 * - /scale_data/{scaleDataId}: Data captured from the live scale.
 *
 * Key Security Decisions:
 * - Read access is public for all collections to allow for easy data consumption.
 * - Write access is denied to all client-side users and must be handled by a trusted environment.
 * - Listing operations for `ScaleData` are not explicitly secured but should be restricted in the application if necessary.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to inox item categories. Write access is denied.
     * @path /inox_item_categories/{inoxItemCategoryId}
     * @allow (get, list): Any user can read item categories.
     * @deny (create, update, delete): No user can create, update, or delete item categories via client.
     * @principle Allows public read access with server-side writes.
     */
    match /inox_item_categories/{inoxItemCategoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to inox items. Write access is denied.
     * @path /inox_items/{inoxItemId}
     * @allow (get, list): Any user can read inox items.
     * @deny (create, update, delete): No user can create, update, or delete inox items via client.
     * @principle Allows public read access with server-side writes.
     */
    match /inox_items/{inoxItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to universal settings. Write access is denied.
     * @path /universal_settings/{universalSettingsId}
     * @allow (get, list): Any user can read universal settings.
     * @deny (create, update, delete): No user can create, update, or delete universal settings via client.
     * @principle Allows public read access with server-side writes.
     */
    match /universal_settings/{universalSettingsId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to scale data. Write access is denied.
     * @path /scale_data/{scaleDataId}
     * @allow (get, list): Any user can read scale data.
     * @deny (create, update, delete): No user can create, update, or delete scale data via client.
     * @principle Allows public read access with server-side writes.
     */
    match /scale_data/{scaleDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Provides a single `get` rule for /pesagens/live for any authenticated user. All write requests are denied.
     * @path /pesagens/live
     * @allow (get): Any authenticated user can get the live pesagem data
     * @deny (list, create, update, delete): Listing, creation, updating, and deletion are not allowed.
     * @principle Authenticated read-only access.
     */
    match /pesagens/live {
      allow get: if isSignedIn();
      allow list, create, update, delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}