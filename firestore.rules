/**
 * @fileOverview Firestore Security Rules for the Inox PriceCalc application.
 *
 * Core Philosophy:
 * This ruleset provides open read access to item catalogs and settings, while securing write access for scale data. It assumes that scale data is written by a trusted source and does not require user-based authorization.
 *
 * Data Structure:
 * - /inox_item_categories/{inoxItemCategoryId}: Stores categories of stainless steel items. Publicly readable.
 * - /inox_items/{inoxItemId}: Stores specific stainless steel items. Publicly readable.
 * - /universal_settings/{universalSettingsId}: Stores universal cost and margin settings. Publicly readable.
 * - /scale_data/{scaleDataId}: Stores data captured from the live scale. Write-only, intended for a service account.
 *
 * Key Security Decisions:
 * - Public Read Access: The inox_item_categories, inox_items, and universal_settings collections are publicly readable to allow easy access to catalog information.
 * - Scale Data Security: The scale_data collection is secured to only allow writes. It is assumed that a trusted service (e.g., Cloud Function) handles the actual writing of data to the scale_data collection.
 * - No User Data: There is no user-specific private data in this application. Therefore, user-based access control patterns (like ownership) are not used.
 *
 * Denormalization for Authorization: Not applicable in this ruleset as no data is user-specific and authorization is based on source (trusted device).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to inox item categories.
     * @path /inox_item_categories/{inoxItemCategoryId}
     * @allow (get) Any user can read an inox item category.
     * @allow (list) Any user can list inox item categories.
     * @deny (create) No user can create inox item categories through client-side rules.
     * @deny (update) No user can update inox item categories through client-side rules.
     * @deny (delete) No user can delete inox item categories through client-side rules.
     * @principle Publicly readable data.
     */
    match /inox_item_categories/{inoxItemCategoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to inox items.
     * @path /inox_items/{inoxItemId}
     * @allow (get) Any user can read an inox item.
     * @allow (list) Any user can list inox items.
     * @deny (create) No user can create inox items through client-side rules.
     * @deny (update) No user can update inox items through client-side rules.
     * @deny (delete) No user can delete inox items through client-side rules.
     * @principle Publicly readable data.
     */
    match /inox_items/{inoxItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to universal settings.
     * @path /universal_settings/{universalSettingsId}
     * @allow (get) Any user can read the universal settings.
     * @allow (list) Any user can list universal settings.
     * @deny (create) No user can create universal settings through client-side rules.
     * @deny (update) No user can update universal settings through client-side rules.
     * @deny (delete) No user can delete universal settings through client-side rules.
     * @principle Publicly readable data.
     */
    match /universal_settings/{universalSettingsId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows writes to scale data. Assumes a trusted service (e.g., Cloud Function) handles the writes.
     * @path /scale_data/{scaleDataId}
     * @allow (create) Any authenticated client can create scale data.
     * @deny (get) No user can read scale data through client-side rules.
     * @deny (list) No user can list scale data through client-side rules.
     * @deny (update) No user can update scale data through client-side rules.
     * @deny (delete) No user can delete scale data through client-side rules.
     * @principle Write-only data from a trusted source.
     */
    match /scale_data/{scaleDataId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }

    /**
     * @description Allows get access to balanca live data.
     * @path /balanca/live
     * @allow (get) Any user can read live data.
     * @deny (list) No user can list live data through client-side rules.
     * @deny (create) No user can create live data through client-side rules.
     * @deny (update) No user can update live data through client-side rules.
     * @deny (delete) No user can delete live data through client-side rules.
     * @principle Publicly readable data.
     */
    match /balanca/live {
      allow get: if true;
      allow list, create, update, delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}